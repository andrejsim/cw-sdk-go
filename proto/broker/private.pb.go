// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: broker/private.proto

package ProtobufBroker

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FundingType int32

const (
	FundingType_Spot   FundingType = 0
	FundingType_Margin FundingType = 1
)

var FundingType_name = map[int32]string{
	0: "Spot",
	1: "Margin",
}
var FundingType_value = map[string]int32{
	"Spot":   0,
	"Margin": 1,
}

func (x FundingType) String() string {
	return proto.EnumName(FundingType_name, int32(x))
}
func (FundingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{0}
}

type PrivateOrder_Type int32

const (
	PrivateOrder_Market                  PrivateOrder_Type = 0
	PrivateOrder_Limit                   PrivateOrder_Type = 1
	PrivateOrder_StopLoss                PrivateOrder_Type = 2
	PrivateOrder_StopLossLimit           PrivateOrder_Type = 3
	PrivateOrder_TakeProfit              PrivateOrder_Type = 4
	PrivateOrder_TakeProfitLimit         PrivateOrder_Type = 5
	PrivateOrder_StopLossTakeProfit      PrivateOrder_Type = 6
	PrivateOrder_StopLossTakeProfitLimit PrivateOrder_Type = 7
	PrivateOrder_TrailingStopLoss        PrivateOrder_Type = 8
	PrivateOrder_TrailingStopLossLimit   PrivateOrder_Type = 9
	PrivateOrder_StopLossAndLimit        PrivateOrder_Type = 10
	PrivateOrder_FillOrKill              PrivateOrder_Type = 11
	PrivateOrder_SettlePosition          PrivateOrder_Type = 12
)

var PrivateOrder_Type_name = map[int32]string{
	0:  "Market",
	1:  "Limit",
	2:  "StopLoss",
	3:  "StopLossLimit",
	4:  "TakeProfit",
	5:  "TakeProfitLimit",
	6:  "StopLossTakeProfit",
	7:  "StopLossTakeProfitLimit",
	8:  "TrailingStopLoss",
	9:  "TrailingStopLossLimit",
	10: "StopLossAndLimit",
	11: "FillOrKill",
	12: "SettlePosition",
}
var PrivateOrder_Type_value = map[string]int32{
	"Market":                  0,
	"Limit":                   1,
	"StopLoss":                2,
	"StopLossLimit":           3,
	"TakeProfit":              4,
	"TakeProfitLimit":         5,
	"StopLossTakeProfit":      6,
	"StopLossTakeProfitLimit": 7,
	"TrailingStopLoss":        8,
	"TrailingStopLossLimit":   9,
	"StopLossAndLimit":        10,
	"FillOrKill":              11,
	"SettlePosition":          12,
}

func (x PrivateOrder_Type) String() string {
	return proto.EnumName(PrivateOrder_Type_name, int32(x))
}
func (PrivateOrder_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{0, 0}
}

type PrivateOrder_PriceParamType int32

const (
	PrivateOrder_AbsoluteValue         PrivateOrder_PriceParamType = 0
	PrivateOrder_OffsetValue           PrivateOrder_PriceParamType = 1
	PrivateOrder_PrecentageOffsetValue PrivateOrder_PriceParamType = 2
)

var PrivateOrder_PriceParamType_name = map[int32]string{
	0: "AbsoluteValue",
	1: "OffsetValue",
	2: "PrecentageOffsetValue",
}
var PrivateOrder_PriceParamType_value = map[string]int32{
	"AbsoluteValue":         0,
	"OffsetValue":           1,
	"PrecentageOffsetValue": 2,
}

func (x PrivateOrder_PriceParamType) String() string {
	return proto.EnumName(PrivateOrder_PriceParamType_name, int32(x))
}
func (PrivateOrder_PriceParamType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{0, 1}
}

type PrivateOrder struct {
	Id                 string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time               int64                      `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Price              float32                    `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Amount             float32                    `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Side               int32                      `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`
	Type               PrivateOrder_Type          `protobuf:"varint,6,opt,name=type,proto3,enum=ProtobufBroker.PrivateOrder_Type" json:"type,omitempty"`
	FundingType        FundingType                `protobuf:"varint,7,opt,name=fundingType,proto3,enum=ProtobufBroker.FundingType" json:"fundingType,omitempty"`
	PriceParams        []*PrivateOrder_PriceParam `protobuf:"bytes,8,rep,name=priceParams,proto3" json:"priceParams,omitempty"`
	AmountParam        float32                    `protobuf:"fixed32,9,opt,name=amountParam,proto3" json:"amountParam,omitempty"`
	AmountParamString  string                     `protobuf:"bytes,16,opt,name=amountParamString,proto3" json:"amountParamString,omitempty"`
	AmountFilledString string                     `protobuf:"bytes,17,opt,name=amountFilledString,proto3" json:"amountFilledString,omitempty"`
	Leverage           string                     `protobuf:"bytes,10,opt,name=leverage,proto3" json:"leverage,omitempty"`
	// For trailing orders
	// DEPRECATED; use strings instead
	CurrentStop             float32                    `protobuf:"fixed32,11,opt,name=currentStop,proto3" json:"currentStop,omitempty"`
	InitialStop             float32                    `protobuf:"fixed32,12,opt,name=initialStop,proto3" json:"initialStop,omitempty"`
	CurrentStopString       string                     `protobuf:"bytes,18,opt,name=currentStopString,proto3" json:"currentStopString,omitempty"`
	InitialStopString       string                     `protobuf:"bytes,19,opt,name=initialStopString,proto3" json:"initialStopString,omitempty"`
	StartTime               int64                      `protobuf:"varint,13,opt,name=startTime,proto3" json:"startTime,omitempty"`
	ExpireTime              int64                      `protobuf:"varint,14,opt,name=expireTime,proto3" json:"expireTime,omitempty"`
	Rate                    float32                    `protobuf:"fixed32,15,opt,name=rate,proto3" json:"rate,omitempty"`
	HasClosingOrder         bool                       `protobuf:"varint,20,opt,name=hasClosingOrder,proto3" json:"hasClosingOrder,omitempty"`
	ClosingOrderType        PrivateOrder_Type          `protobuf:"varint,21,opt,name=closingOrderType,proto3,enum=ProtobufBroker.PrivateOrder_Type" json:"closingOrderType,omitempty"`
	ClosingOrderPriceParams []*PrivateOrder_PriceParam `protobuf:"bytes,22,rep,name=closingOrderPriceParams,proto3" json:"closingOrderPriceParams,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}                   `json:"-"`
	XXX_unrecognized        []byte                     `json:"-"`
	XXX_sizecache           int32                      `json:"-"`
}

func (m *PrivateOrder) Reset()         { *m = PrivateOrder{} }
func (m *PrivateOrder) String() string { return proto.CompactTextString(m) }
func (*PrivateOrder) ProtoMessage()    {}
func (*PrivateOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{0}
}
func (m *PrivateOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivateOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateOrder.Merge(dst, src)
}
func (m *PrivateOrder) XXX_Size() int {
	return m.Size()
}
func (m *PrivateOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateOrder.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateOrder proto.InternalMessageInfo

func (m *PrivateOrder) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrivateOrder) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivateOrder) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PrivateOrder) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PrivateOrder) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *PrivateOrder) GetType() PrivateOrder_Type {
	if m != nil {
		return m.Type
	}
	return PrivateOrder_Market
}

func (m *PrivateOrder) GetFundingType() FundingType {
	if m != nil {
		return m.FundingType
	}
	return FundingType_Spot
}

func (m *PrivateOrder) GetPriceParams() []*PrivateOrder_PriceParam {
	if m != nil {
		return m.PriceParams
	}
	return nil
}

func (m *PrivateOrder) GetAmountParam() float32 {
	if m != nil {
		return m.AmountParam
	}
	return 0
}

func (m *PrivateOrder) GetAmountParamString() string {
	if m != nil {
		return m.AmountParamString
	}
	return ""
}

func (m *PrivateOrder) GetAmountFilledString() string {
	if m != nil {
		return m.AmountFilledString
	}
	return ""
}

func (m *PrivateOrder) GetLeverage() string {
	if m != nil {
		return m.Leverage
	}
	return ""
}

func (m *PrivateOrder) GetCurrentStop() float32 {
	if m != nil {
		return m.CurrentStop
	}
	return 0
}

func (m *PrivateOrder) GetInitialStop() float32 {
	if m != nil {
		return m.InitialStop
	}
	return 0
}

func (m *PrivateOrder) GetCurrentStopString() string {
	if m != nil {
		return m.CurrentStopString
	}
	return ""
}

func (m *PrivateOrder) GetInitialStopString() string {
	if m != nil {
		return m.InitialStopString
	}
	return ""
}

func (m *PrivateOrder) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *PrivateOrder) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *PrivateOrder) GetRate() float32 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func (m *PrivateOrder) GetHasClosingOrder() bool {
	if m != nil {
		return m.HasClosingOrder
	}
	return false
}

func (m *PrivateOrder) GetClosingOrderType() PrivateOrder_Type {
	if m != nil {
		return m.ClosingOrderType
	}
	return PrivateOrder_Market
}

func (m *PrivateOrder) GetClosingOrderPriceParams() []*PrivateOrder_PriceParam {
	if m != nil {
		return m.ClosingOrderPriceParams
	}
	return nil
}

type PrivateOrder_PriceParam struct {
	Value                float32                     `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	ValueString          string                      `protobuf:"bytes,3,opt,name=valueString,proto3" json:"valueString,omitempty"`
	Type                 PrivateOrder_PriceParamType `protobuf:"varint,2,opt,name=type,proto3,enum=ProtobufBroker.PrivateOrder_PriceParamType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PrivateOrder_PriceParam) Reset()         { *m = PrivateOrder_PriceParam{} }
func (m *PrivateOrder_PriceParam) String() string { return proto.CompactTextString(m) }
func (*PrivateOrder_PriceParam) ProtoMessage()    {}
func (*PrivateOrder_PriceParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{0, 0}
}
func (m *PrivateOrder_PriceParam) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateOrder_PriceParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateOrder_PriceParam.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivateOrder_PriceParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateOrder_PriceParam.Merge(dst, src)
}
func (m *PrivateOrder_PriceParam) XXX_Size() int {
	return m.Size()
}
func (m *PrivateOrder_PriceParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateOrder_PriceParam.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateOrder_PriceParam proto.InternalMessageInfo

func (m *PrivateOrder_PriceParam) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *PrivateOrder_PriceParam) GetValueString() string {
	if m != nil {
		return m.ValueString
	}
	return ""
}

func (m *PrivateOrder_PriceParam) GetType() PrivateOrder_PriceParamType {
	if m != nil {
		return m.Type
	}
	return PrivateOrder_AbsoluteValue
}

type PrivateTrade struct {
	ExternalId   string  `protobuf:"bytes,7,opt,name=externalId,proto3" json:"externalId,omitempty"`
	OrderId      string  `protobuf:"bytes,8,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Time         int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	TimeMillis   int64   `protobuf:"varint,6,opt,name=timeMillis,proto3" json:"timeMillis,omitempty"`
	Price        float32 `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	PriceString  string  `protobuf:"bytes,9,opt,name=priceString,proto3" json:"priceString,omitempty"`
	Amount       float32 `protobuf:"fixed32,4,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountString string  `protobuf:"bytes,10,opt,name=amountString,proto3" json:"amountString,omitempty"`
	Side         int32   `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`
	// Deprecated since we don't want to expose our SQL IDs
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateTrade) Reset()         { *m = PrivateTrade{} }
func (m *PrivateTrade) String() string { return proto.CompactTextString(m) }
func (*PrivateTrade) ProtoMessage()    {}
func (*PrivateTrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{1}
}
func (m *PrivateTrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateTrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateTrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivateTrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateTrade.Merge(dst, src)
}
func (m *PrivateTrade) XXX_Size() int {
	return m.Size()
}
func (m *PrivateTrade) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateTrade.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateTrade proto.InternalMessageInfo

func (m *PrivateTrade) GetExternalId() string {
	if m != nil {
		return m.ExternalId
	}
	return ""
}

func (m *PrivateTrade) GetOrderId() string {
	if m != nil {
		return m.OrderId
	}
	return ""
}

func (m *PrivateTrade) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivateTrade) GetTimeMillis() int64 {
	if m != nil {
		return m.TimeMillis
	}
	return 0
}

func (m *PrivateTrade) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *PrivateTrade) GetPriceString() string {
	if m != nil {
		return m.PriceString
	}
	return ""
}

func (m *PrivateTrade) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *PrivateTrade) GetAmountString() string {
	if m != nil {
		return m.AmountString
	}
	return ""
}

func (m *PrivateTrade) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *PrivateTrade) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type PrivatePosition struct {
	Id             string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time           int64   `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	Side           int32   `protobuf:"varint,3,opt,name=side,proto3" json:"side,omitempty"`
	AvgPrice       float32 `protobuf:"fixed32,4,opt,name=avgPrice,proto3" json:"avgPrice,omitempty"`
	AvgPriceString string  `protobuf:"bytes,9,opt,name=avgPriceString,proto3" json:"avgPriceString,omitempty"`
	// DEPRECATED; use strings instead
	AmountOpen         float32  `protobuf:"fixed32,5,opt,name=amountOpen,proto3" json:"amountOpen,omitempty"`
	AmountClosed       float32  `protobuf:"fixed32,6,opt,name=amountClosed,proto3" json:"amountClosed,omitempty"`
	AmountOpenString   string   `protobuf:"bytes,10,opt,name=amountOpenString,proto3" json:"amountOpenString,omitempty"`
	AmountClosedString string   `protobuf:"bytes,11,opt,name=amountClosedString,proto3" json:"amountClosedString,omitempty"`
	OrderIds           []string `protobuf:"bytes,7,rep,name=orderIds,proto3" json:"orderIds,omitempty"`
	// NOTE:
	// Trade ids are sent as strings here, while historically they
	// have been represented as integers. We need to transition to using
	// strings everywhere because of the rectangle/square rule; using
	// ints is simply not compatible with some exchanges which use UUIDs (like Kraken lol)
	TradeIds             []string `protobuf:"bytes,8,rep,name=tradeIds,proto3" json:"tradeIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivatePosition) Reset()         { *m = PrivatePosition{} }
func (m *PrivatePosition) String() string { return proto.CompactTextString(m) }
func (*PrivatePosition) ProtoMessage()    {}
func (*PrivatePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{2}
}
func (m *PrivatePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivatePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivatePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrivatePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivatePosition.Merge(dst, src)
}
func (m *PrivatePosition) XXX_Size() int {
	return m.Size()
}
func (m *PrivatePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivatePosition.DiscardUnknown(m)
}

var xxx_messageInfo_PrivatePosition proto.InternalMessageInfo

func (m *PrivatePosition) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *PrivatePosition) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivatePosition) GetSide() int32 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *PrivatePosition) GetAvgPrice() float32 {
	if m != nil {
		return m.AvgPrice
	}
	return 0
}

func (m *PrivatePosition) GetAvgPriceString() string {
	if m != nil {
		return m.AvgPriceString
	}
	return ""
}

func (m *PrivatePosition) GetAmountOpen() float32 {
	if m != nil {
		return m.AmountOpen
	}
	return 0
}

func (m *PrivatePosition) GetAmountClosed() float32 {
	if m != nil {
		return m.AmountClosed
	}
	return 0
}

func (m *PrivatePosition) GetAmountOpenString() string {
	if m != nil {
		return m.AmountOpenString
	}
	return ""
}

func (m *PrivatePosition) GetAmountClosedString() string {
	if m != nil {
		return m.AmountClosedString
	}
	return ""
}

func (m *PrivatePosition) GetOrderIds() []string {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

func (m *PrivatePosition) GetTradeIds() []string {
	if m != nil {
		return m.TradeIds
	}
	return nil
}

type Balance struct {
	Currency             string   `protobuf:"bytes,1,opt,name=currency,proto3" json:"currency,omitempty"`
	Amount               float32  `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
	AmountString         string   `protobuf:"bytes,3,opt,name=amountString,proto3" json:"amountString,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Balance) Reset()         { *m = Balance{} }
func (m *Balance) String() string { return proto.CompactTextString(m) }
func (*Balance) ProtoMessage()    {}
func (*Balance) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{3}
}
func (m *Balance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Balance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balance.Merge(dst, src)
}
func (m *Balance) XXX_Size() int {
	return m.Size()
}
func (m *Balance) XXX_DiscardUnknown() {
	xxx_messageInfo_Balance.DiscardUnknown(m)
}

var xxx_messageInfo_Balance proto.InternalMessageInfo

func (m *Balance) GetCurrency() string {
	if m != nil {
		return m.Currency
	}
	return ""
}

func (m *Balance) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Balance) GetAmountString() string {
	if m != nil {
		return m.AmountString
	}
	return ""
}

type Balances struct {
	FundingType          FundingType `protobuf:"varint,1,opt,name=fundingType,proto3,enum=ProtobufBroker.FundingType" json:"fundingType,omitempty"`
	Balances             []*Balance  `protobuf:"bytes,2,rep,name=balances,proto3" json:"balances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Balances) Reset()         { *m = Balances{} }
func (m *Balances) String() string { return proto.CompactTextString(m) }
func (*Balances) ProtoMessage()    {}
func (*Balances) Descriptor() ([]byte, []int) {
	return fileDescriptor_private_811f458ee9e53268, []int{4}
}
func (m *Balances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Balances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Balances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Balances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Balances.Merge(dst, src)
}
func (m *Balances) XXX_Size() int {
	return m.Size()
}
func (m *Balances) XXX_DiscardUnknown() {
	xxx_messageInfo_Balances.DiscardUnknown(m)
}

var xxx_messageInfo_Balances proto.InternalMessageInfo

func (m *Balances) GetFundingType() FundingType {
	if m != nil {
		return m.FundingType
	}
	return FundingType_Spot
}

func (m *Balances) GetBalances() []*Balance {
	if m != nil {
		return m.Balances
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivateOrder)(nil), "ProtobufBroker.PrivateOrder")
	proto.RegisterType((*PrivateOrder_PriceParam)(nil), "ProtobufBroker.PrivateOrder.PriceParam")
	proto.RegisterType((*PrivateTrade)(nil), "ProtobufBroker.PrivateTrade")
	proto.RegisterType((*PrivatePosition)(nil), "ProtobufBroker.PrivatePosition")
	proto.RegisterType((*Balance)(nil), "ProtobufBroker.Balance")
	proto.RegisterType((*Balances)(nil), "ProtobufBroker.Balances")
	proto.RegisterEnum("ProtobufBroker.FundingType", FundingType_name, FundingType_value)
	proto.RegisterEnum("ProtobufBroker.PrivateOrder_Type", PrivateOrder_Type_name, PrivateOrder_Type_value)
	proto.RegisterEnum("ProtobufBroker.PrivateOrder_PriceParamType", PrivateOrder_PriceParamType_name, PrivateOrder_PriceParamType_value)
}
func (m *PrivateOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateOrder) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Time))
	}
	if m.Price != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i += 4
	}
	if m.Amount != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i += 4
	}
	if m.Side != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Side))
	}
	if m.Type != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Type))
	}
	if m.FundingType != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.FundingType))
	}
	if len(m.PriceParams) > 0 {
		for _, msg := range m.PriceParams {
			dAtA[i] = 0x42
			i++
			i = encodeVarintPrivate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AmountParam != 0 {
		dAtA[i] = 0x4d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AmountParam))))
		i += 4
	}
	if len(m.Leverage) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Leverage)))
		i += copy(dAtA[i:], m.Leverage)
	}
	if m.CurrentStop != 0 {
		dAtA[i] = 0x5d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CurrentStop))))
		i += 4
	}
	if m.InitialStop != 0 {
		dAtA[i] = 0x65
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.InitialStop))))
		i += 4
	}
	if m.StartTime != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.ExpireTime))
	}
	if m.Rate != 0 {
		dAtA[i] = 0x7d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Rate))))
		i += 4
	}
	if len(m.AmountParamString) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountParamString)))
		i += copy(dAtA[i:], m.AmountParamString)
	}
	if len(m.AmountFilledString) > 0 {
		dAtA[i] = 0x8a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountFilledString)))
		i += copy(dAtA[i:], m.AmountFilledString)
	}
	if len(m.CurrentStopString) > 0 {
		dAtA[i] = 0x92
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.CurrentStopString)))
		i += copy(dAtA[i:], m.CurrentStopString)
	}
	if len(m.InitialStopString) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.InitialStopString)))
		i += copy(dAtA[i:], m.InitialStopString)
	}
	if m.HasClosingOrder {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x1
		i++
		if m.HasClosingOrder {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ClosingOrderType != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.ClosingOrderType))
	}
	if len(m.ClosingOrderPriceParams) > 0 {
		for _, msg := range m.ClosingOrderPriceParams {
			dAtA[i] = 0xb2
			i++
			dAtA[i] = 0x1
			i++
			i = encodeVarintPrivate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrivateOrder_PriceParam) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateOrder_PriceParam) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Type))
	}
	if len(m.ValueString) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.ValueString)))
		i += copy(dAtA[i:], m.ValueString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrivateTrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateTrade) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Id))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Time))
	}
	if m.Price != 0 {
		dAtA[i] = 0x1d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Price))))
		i += 4
	}
	if m.Amount != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i += 4
	}
	if m.Side != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Side))
	}
	if m.TimeMillis != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.TimeMillis))
	}
	if len(m.ExternalId) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.ExternalId)))
		i += copy(dAtA[i:], m.ExternalId)
	}
	if len(m.OrderId) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.OrderId)))
		i += copy(dAtA[i:], m.OrderId)
	}
	if len(m.PriceString) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.PriceString)))
		i += copy(dAtA[i:], m.PriceString)
	}
	if len(m.AmountString) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountString)))
		i += copy(dAtA[i:], m.AmountString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrivatePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivatePosition) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Time))
	}
	if m.Side != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.Side))
	}
	if m.AvgPrice != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AvgPrice))))
		i += 4
	}
	if m.AmountOpen != 0 {
		dAtA[i] = 0x2d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AmountOpen))))
		i += 4
	}
	if m.AmountClosed != 0 {
		dAtA[i] = 0x35
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AmountClosed))))
		i += 4
	}
	if len(m.OrderIds) > 0 {
		for _, s := range m.OrderIds {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.TradeIds) > 0 {
		for _, s := range m.TradeIds {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.AvgPriceString) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AvgPriceString)))
		i += copy(dAtA[i:], m.AvgPriceString)
	}
	if len(m.AmountOpenString) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountOpenString)))
		i += copy(dAtA[i:], m.AmountOpenString)
	}
	if len(m.AmountClosedString) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountClosedString)))
		i += copy(dAtA[i:], m.AmountClosedString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Balance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Currency) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.Currency)))
		i += copy(dAtA[i:], m.Currency)
	}
	if m.Amount != 0 {
		dAtA[i] = 0x15
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i += 4
	}
	if len(m.AmountString) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(len(m.AmountString)))
		i += copy(dAtA[i:], m.AmountString)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Balances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Balances) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FundingType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPrivate(dAtA, i, uint64(m.FundingType))
	}
	if len(m.Balances) > 0 {
		for _, msg := range m.Balances {
			dAtA[i] = 0x12
			i++
			i = encodeVarintPrivate(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPrivate(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PrivateOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovPrivate(uint64(m.Time))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.Amount != 0 {
		n += 5
	}
	if m.Side != 0 {
		n += 1 + sovPrivate(uint64(m.Side))
	}
	if m.Type != 0 {
		n += 1 + sovPrivate(uint64(m.Type))
	}
	if m.FundingType != 0 {
		n += 1 + sovPrivate(uint64(m.FundingType))
	}
	if len(m.PriceParams) > 0 {
		for _, e := range m.PriceParams {
			l = e.Size()
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	if m.AmountParam != 0 {
		n += 5
	}
	l = len(m.Leverage)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.CurrentStop != 0 {
		n += 5
	}
	if m.InitialStop != 0 {
		n += 5
	}
	if m.StartTime != 0 {
		n += 1 + sovPrivate(uint64(m.StartTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovPrivate(uint64(m.ExpireTime))
	}
	if m.Rate != 0 {
		n += 5
	}
	l = len(m.AmountParamString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountFilledString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	l = len(m.CurrentStopString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	l = len(m.InitialStopString)
	if l > 0 {
		n += 2 + l + sovPrivate(uint64(l))
	}
	if m.HasClosingOrder {
		n += 3
	}
	if m.ClosingOrderType != 0 {
		n += 2 + sovPrivate(uint64(m.ClosingOrderType))
	}
	if len(m.ClosingOrderPriceParams) > 0 {
		for _, e := range m.ClosingOrderPriceParams {
			l = e.Size()
			n += 2 + l + sovPrivate(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateOrder_PriceParam) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Value != 0 {
		n += 5
	}
	if m.Type != 0 {
		n += 1 + sovPrivate(uint64(m.Type))
	}
	l = len(m.ValueString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateTrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPrivate(uint64(m.Id))
	}
	if m.Time != 0 {
		n += 1 + sovPrivate(uint64(m.Time))
	}
	if m.Price != 0 {
		n += 5
	}
	if m.Amount != 0 {
		n += 5
	}
	if m.Side != 0 {
		n += 1 + sovPrivate(uint64(m.Side))
	}
	if m.TimeMillis != 0 {
		n += 1 + sovPrivate(uint64(m.TimeMillis))
	}
	l = len(m.ExternalId)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.PriceString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivatePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovPrivate(uint64(m.Time))
	}
	if m.Side != 0 {
		n += 1 + sovPrivate(uint64(m.Side))
	}
	if m.AvgPrice != 0 {
		n += 5
	}
	if m.AmountOpen != 0 {
		n += 5
	}
	if m.AmountClosed != 0 {
		n += 5
	}
	if len(m.OrderIds) > 0 {
		for _, s := range m.OrderIds {
			l = len(s)
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	if len(m.TradeIds) > 0 {
		for _, s := range m.TradeIds {
			l = len(s)
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	l = len(m.AvgPriceString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountOpenString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	l = len(m.AmountClosedString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Balance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Currency)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.Amount != 0 {
		n += 5
	}
	l = len(m.AmountString)
	if l > 0 {
		n += 1 + l + sovPrivate(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Balances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FundingType != 0 {
		n += 1 + sovPrivate(uint64(m.FundingType))
	}
	if len(m.Balances) > 0 {
		for _, e := range m.Balances {
			l = e.Size()
			n += 1 + l + sovPrivate(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPrivate(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPrivate(x uint64) (n int) {
	return sovPrivate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrivateOrder_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingType", wireType)
			}
			m.FundingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingType |= (FundingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceParams = append(m.PriceParams, &PrivateOrder_PriceParam{})
			if err := m.PriceParams[len(m.PriceParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountParam", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AmountParam = float32(math.Float32frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Leverage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStop", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CurrentStop = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialStop", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.InitialStop = float32(math.Float32frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rate", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Rate = float32(math.Float32frombits(v))
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountParamString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountParamString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountFilledString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountFilledString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentStopString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentStopString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialStopString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialStopString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasClosingOrder", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasClosingOrder = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingOrderType", wireType)
			}
			m.ClosingOrderType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClosingOrderType |= (PrivateOrder_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClosingOrderPriceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClosingOrderPriceParams = append(m.ClosingOrderPriceParams, &PrivateOrder_PriceParam{})
			if err := m.ClosingOrderPriceParams[len(m.ClosingOrderPriceParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateOrder_PriceParam) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PriceParam: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PriceParam: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (PrivateOrder_PriceParamType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateTrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateTrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateTrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Price = float32(math.Float32frombits(v))
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeMillis", wireType)
			}
			m.TimeMillis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeMillis |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PriceString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivatePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivatePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivatePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgPrice", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AvgPrice = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOpen", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AmountOpen = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountClosed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AmountClosed = float32(math.Float32frombits(v))
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIds = append(m.OrderIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeIds = append(m.TradeIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgPriceString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AvgPriceString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOpenString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountOpenString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountClosedString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountClosedString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Balance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Currency", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Currency = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Balances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Balances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Balances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingType", wireType)
			}
			m.FundingType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FundingType |= (FundingType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPrivate
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, &Balance{})
			if err := m.Balances[len(m.Balances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrivate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPrivate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrivate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrivate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrivate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPrivate
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPrivate
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPrivate(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPrivate = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrivate   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("broker/private.proto", fileDescriptor_private_811f458ee9e53268) }

var fileDescriptor_private_811f458ee9e53268 = []byte{
	// 940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xde, 0xf9, 0xb1, 0x3d, 0xae, 0xf1, 0xda, 0x93, 0xda, 0x6c, 0xd2, 0x64, 0x91, 0x35, 0x18,
	0x09, 0xac, 0x05, 0x19, 0x69, 0x57, 0x1c, 0x11, 0xda, 0x20, 0xad, 0x94, 0x65, 0x23, 0x5b, 0x13,
	0x8b, 0x7b, 0xdb, 0xd3, 0x36, 0xad, 0x4c, 0x66, 0xac, 0x9e, 0x76, 0x44, 0xce, 0x88, 0x0b, 0x67,
	0x0e, 0x3c, 0x12, 0x47, 0x1e, 0x01, 0x05, 0xf1, 0x1a, 0x08, 0x75, 0xf7, 0x8c, 0xdd, 0xb6, 0x17,
	0x94, 0x3d, 0x70, 0xf2, 0xd4, 0x57, 0x5f, 0x55, 0xd7, 0x5f, 0x57, 0x1b, 0x8e, 0x67, 0xa2, 0xb8,
	0x66, 0xe2, 0x8b, 0x95, 0xe0, 0xb7, 0x54, 0xb2, 0xd1, 0x4a, 0x14, 0xb2, 0xc0, 0xee, 0x44, 0xfd,
	0xcc, 0xd6, 0x8b, 0x73, 0xad, 0x1d, 0xfc, 0x0d, 0xd0, 0x99, 0x18, 0xc6, 0x58, 0xa4, 0x4c, 0x60,
	0x17, 0x5c, 0x9e, 0x12, 0x27, 0x76, 0x86, 0xed, 0xc4, 0xe5, 0x29, 0x22, 0xf8, 0x92, 0xdf, 0x30,
	0xe2, 0xc6, 0xce, 0xd0, 0x4b, 0xf4, 0x37, 0x1e, 0x43, 0x63, 0x25, 0xf8, 0x9c, 0x11, 0x2f, 0x76,
	0x86, 0x6e, 0x62, 0x04, 0x3c, 0x81, 0x26, 0xbd, 0x29, 0xd6, 0xb9, 0x24, 0xbe, 0x86, 0x2b, 0x49,
	0x79, 0x28, 0x79, 0xca, 0x48, 0x23, 0x76, 0x86, 0x8d, 0x44, 0x7f, 0xe3, 0x97, 0xe0, 0xcb, 0xbb,
	0x15, 0x23, 0xcd, 0xd8, 0x19, 0x76, 0x5f, 0x7c, 0x34, 0xda, 0x8d, 0x6a, 0x64, 0x47, 0x34, 0x9a,
	0xde, 0xad, 0x58, 0xa2, 0xe9, 0xf8, 0x15, 0x84, 0x8b, 0x75, 0x9e, 0xf2, 0x7c, 0xa9, 0x40, 0xd2,
	0xd2, 0xd6, 0xcf, 0xf6, 0xad, 0x5f, 0x6f, 0x29, 0x89, 0xcd, 0xc7, 0x0b, 0x08, 0x75, 0xa8, 0x13,
	0x2a, 0xe8, 0x4d, 0x49, 0x82, 0xd8, 0x1b, 0x86, 0x2f, 0x3e, 0xfd, 0xcf, 0xc3, 0x27, 0x1b, 0x7e,
	0x62, 0xdb, 0x62, 0x0c, 0xa1, 0x49, 0x4f, 0xcb, 0xa4, 0xad, 0x33, 0xb6, 0x21, 0x3c, 0x83, 0x20,
	0x63, 0xb7, 0x4c, 0xd0, 0x25, 0x23, 0xa0, 0xcb, 0xb9, 0x91, 0x95, 0xf5, 0x7c, 0x2d, 0x04, 0xcb,
	0xe5, 0x95, 0x2c, 0x56, 0x24, 0x34, 0xd6, 0x16, 0xa4, 0x18, 0x3c, 0xe7, 0x92, 0xd3, 0x4c, 0x33,
	0x3a, 0x86, 0x61, 0x41, 0xf8, 0x21, 0xb4, 0x4b, 0x49, 0x85, 0x9c, 0xaa, 0xee, 0x3c, 0xd6, 0xdd,
	0xd9, 0x02, 0xd8, 0x07, 0x60, 0x3f, 0xac, 0xb8, 0x60, 0x5a, 0xdd, 0xd5, 0x6a, 0x0b, 0x51, 0x4d,
	0x11, 0x54, 0x32, 0xd2, 0xd3, 0x8e, 0xf5, 0x37, 0x7e, 0x0e, 0x47, 0x56, 0x02, 0x57, 0x52, 0xf0,
	0x7c, 0x49, 0x22, 0x1d, 0xfa, 0xa1, 0x02, 0x47, 0x80, 0x06, 0x7c, 0xcd, 0xb3, 0x8c, 0xa5, 0x15,
	0xfd, 0x48, 0xd3, 0xdf, 0xa1, 0x51, 0xde, 0xad, 0x04, 0x2b, 0x3a, 0x1a, 0xef, 0x07, 0x0a, 0xc5,
	0xb6, 0x92, 0xad, 0xd8, 0x4f, 0x0c, 0xfb, 0x40, 0x81, 0x43, 0xe8, 0x7d, 0x4f, 0xcb, 0x6f, 0xb2,
	0xa2, 0xe4, 0xf9, 0x52, 0x37, 0x8e, 0x1c, 0xc7, 0xce, 0x30, 0x48, 0xf6, 0x61, 0xbc, 0x84, 0x68,
	0x6e, 0xc9, 0x7a, 0x8c, 0x9e, 0x3e, 0x74, 0x08, 0x0f, 0x4c, 0x91, 0xc2, 0xa9, 0x8d, 0x4d, 0xac,
	0xe9, 0x3a, 0x79, 0xbf, 0xe9, 0xfa, 0x37, 0x3f, 0x67, 0x3f, 0x39, 0x00, 0x5b, 0x59, 0xdd, 0xbd,
	0x5b, 0x9a, 0xad, 0x99, 0xbe, 0xa2, 0x6e, 0x62, 0x04, 0xfc, 0xba, 0xba, 0x4f, 0xae, 0x4e, 0xe5,
	0xb3, 0x07, 0x1e, 0x6a, 0xdd, 0xac, 0x18, 0x42, 0xed, 0xa9, 0xaa, 0xb4, 0xa7, 0x2b, 0x6d, 0x43,
	0x83, 0x1f, 0x5d, 0xf0, 0x75, 0xce, 0x00, 0xcd, 0x4b, 0x2a, 0xae, 0x99, 0x8c, 0x1e, 0x61, 0x1b,
	0x1a, 0x6f, 0xf9, 0x0d, 0x97, 0x91, 0x83, 0x1d, 0x08, 0x54, 0x47, 0xde, 0x16, 0x65, 0x19, 0xb9,
	0x78, 0x04, 0x8f, 0x6b, 0xc9, 0x10, 0x3c, 0xec, 0x02, 0x4c, 0xe9, 0x35, 0x9b, 0x88, 0x62, 0xc1,
	0x65, 0xe4, 0xe3, 0x13, 0xe8, 0x6d, 0x65, 0x43, 0x6a, 0xe0, 0x09, 0x60, 0x6d, 0x67, 0x91, 0x9b,
	0xf8, 0x0c, 0x4e, 0x0f, 0x71, 0x63, 0xd4, 0xc2, 0x63, 0x88, 0xa6, 0x82, 0xf2, 0x8c, 0xe7, 0xcb,
	0x4d, 0x08, 0x01, 0x7e, 0x00, 0x4f, 0xf7, 0x51, 0x63, 0xd0, 0x56, 0x06, 0x35, 0xf4, 0x2a, 0x4f,
	0x0d, 0x0a, 0x2a, 0x40, 0x35, 0xb1, 0x63, 0xf1, 0x2d, 0xcf, 0xb2, 0x28, 0x44, 0x84, 0xee, 0x15,
	0x93, 0x32, 0x63, 0x93, 0xa2, 0xe4, 0x92, 0x17, 0x79, 0xd4, 0x19, 0x8c, 0xa1, 0xbb, 0x5b, 0x3f,
	0x95, 0xe9, 0xab, 0x59, 0x59, 0x64, 0x6b, 0xc9, 0xbe, 0x53, 0xe5, 0x8a, 0x1e, 0x61, 0x0f, 0xc2,
	0xf1, 0x62, 0x51, 0x32, 0x69, 0x00, 0x47, 0x85, 0x32, 0x11, 0x6c, 0xce, 0x72, 0x49, 0x97, 0xcc,
	0x56, 0xb9, 0x83, 0x5f, 0xdc, 0xcd, 0x02, 0x9e, 0x0a, 0x9a, 0x32, 0x6b, 0x01, 0x7b, 0xff, 0xe3,
	0x02, 0xee, 0x03, 0x28, 0x4f, 0x97, 0x3c, 0xcb, 0x78, 0xa9, 0xd7, 0xb0, 0x97, 0x58, 0x88, 0xd9,
	0x1f, 0x92, 0x89, 0x9c, 0x66, 0x17, 0xa9, 0x5e, 0xb4, 0xed, 0xc4, 0x42, 0x90, 0x40, 0xab, 0x50,
	0xd3, 0x74, 0x91, 0x92, 0x40, 0x2b, 0x6b, 0x51, 0x4d, 0x92, 0x0e, 0xa7, 0x9a, 0xa4, 0xb6, 0x99,
	0x24, 0x0b, 0xc2, 0x01, 0x74, 0x4c, 0x64, 0x15, 0xc5, 0x6c, 0xc7, 0x1d, 0x6c, 0xf0, 0x97, 0x0b,
	0xbd, 0xaa, 0x2c, 0x75, 0xf5, 0x1f, 0xf4, 0x34, 0xd5, 0xb9, 0x7a, 0x56, 0xae, 0x67, 0x10, 0xd0,
	0xdb, 0xa5, 0x6e, 0x5b, 0x55, 0x99, 0x8d, 0xac, 0xf2, 0x34, 0xe7, 0x8e, 0x57, 0x2c, 0xd7, 0x15,
	0x72, 0x13, 0x0b, 0xd9, 0xc6, 0xaa, 0xb6, 0x08, 0x4b, 0x75, 0xa5, 0xdc, 0x64, 0x07, 0x53, 0xfe,
	0xab, 0xe4, 0x4b, 0xd2, 0x8a, 0x3d, 0xb5, 0xe9, 0x6b, 0x59, 0xe9, 0xa4, 0x6a, 0xab, 0xd2, 0x05,
	0x46, 0x57, 0xcb, 0xf8, 0x09, 0x74, 0xeb, 0x38, 0x76, 0x8a, 0xb5, 0x87, 0xe2, 0x73, 0x88, 0xb6,
	0x11, 0xed, 0xd4, 0xec, 0x00, 0xdf, 0x6e, 0x65, 0x13, 0x5b, 0xc5, 0x0e, 0xed, 0xad, 0x6c, 0x6b,
	0x06, 0x14, 0x5a, 0xe7, 0x34, 0xa3, 0xf9, 0x5c, 0x97, 0xc9, 0xec, 0xe1, 0xf9, 0x5d, 0x55, 0xe4,
	0x8d, 0x6c, 0x8d, 0x96, 0xbb, 0x33, 0x5a, 0xfb, 0xad, 0xf4, 0xde, 0xd1, 0xca, 0x9f, 0x1d, 0x08,
	0xaa, 0x33, 0xca, 0xfd, 0x17, 0xdc, 0x79, 0xcf, 0x17, 0xfc, 0x25, 0x04, 0xb3, 0xca, 0x15, 0x71,
	0xf5, 0x82, 0x3d, 0xdd, 0xb7, 0xad, 0x8e, 0x4a, 0x36, 0xc4, 0x37, 0x7e, 0xe0, 0x45, 0xfe, 0x1b,
	0x3f, 0xf0, 0xa3, 0xc6, 0xf3, 0x8f, 0x21, 0xb4, 0x9c, 0x63, 0x00, 0xfe, 0xd5, 0xaa, 0x50, 0x9b,
	0xcc, 0x6c, 0xb5, 0x25, 0xcf, 0x23, 0xe7, 0x3c, 0xfa, 0xed, 0xbe, 0xef, 0xfc, 0x7e, 0xdf, 0x77,
	0xfe, 0xb8, 0xef, 0x3b, 0xbf, 0xfe, 0xd9, 0x7f, 0x34, 0x6b, 0xea, 0x7f, 0x4f, 0x2f, 0xff, 0x09,
	0x00, 0x00, 0xff, 0xff, 0xc7, 0x84, 0x46, 0x28, 0x55, 0x09, 0x00, 0x00,
}
