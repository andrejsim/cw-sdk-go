// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stream/stream.proto

package ProtobufStream

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import client "code.cryptowat.ch/cw-sdk-go/proto/client"
import markets "code.cryptowat.ch/cw-sdk-go/proto/markets"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AuthenticationResult_Status int32

const (
	AuthenticationResult_UNKNOWN       AuthenticationResult_Status = 0
	AuthenticationResult_AUTHENTICATED AuthenticationResult_Status = 1
	AuthenticationResult_BAD_NONCE     AuthenticationResult_Status = 2
	AuthenticationResult_BAD_TOKEN     AuthenticationResult_Status = 3
	AuthenticationResult_TOKEN_EXPIRED AuthenticationResult_Status = 4
	AuthenticationResult_READONLY_KEY  AuthenticationResult_Status = 5
	AuthenticationResult_ACCESS_DENIED AuthenticationResult_Status = 6
)

var AuthenticationResult_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "AUTHENTICATED",
	2: "BAD_NONCE",
	3: "BAD_TOKEN",
	4: "TOKEN_EXPIRED",
	5: "READONLY_KEY",
	6: "ACCESS_DENIED",
}
var AuthenticationResult_Status_value = map[string]int32{
	"UNKNOWN":       0,
	"AUTHENTICATED": 1,
	"BAD_NONCE":     2,
	"BAD_TOKEN":     3,
	"TOKEN_EXPIRED": 4,
	"READONLY_KEY":  5,
	"ACCESS_DENIED": 6,
}

func (x AuthenticationResult_Status) String() string {
	return proto.EnumName(AuthenticationResult_Status_name, int32(x))
}
func (AuthenticationResult_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{1, 0}
}

type StreamMessage struct {
	// Types that are valid to be assigned to Body:
	//	*StreamMessage_AuthenticationResult
	//	*StreamMessage_SubscriptionResult
	//	*StreamMessage_UnsubscriptionResult
	//	*StreamMessage_MissedMessages
	//	*StreamMessage_MarketUpdate
	//	*StreamMessage_PairUpdate
	//	*StreamMessage_AssetUpdate
	//	*StreamMessage_IndexUpdate
	//	*StreamMessage_BandwidthUpdate
	Body                 isStreamMessage_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *StreamMessage) Reset()         { *m = StreamMessage{} }
func (m *StreamMessage) String() string { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()    {}
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{0}
}
func (m *StreamMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StreamMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMessage.Merge(dst, src)
}
func (m *StreamMessage) XXX_Size() int {
	return m.Size()
}
func (m *StreamMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMessage proto.InternalMessageInfo

type isStreamMessage_Body interface {
	isStreamMessage_Body()
	MarshalTo([]byte) (int, error)
	Size() int
}

type StreamMessage_AuthenticationResult struct {
	AuthenticationResult *AuthenticationResult `protobuf:"bytes,1,opt,name=authenticationResult,proto3,oneof"`
}
type StreamMessage_SubscriptionResult struct {
	SubscriptionResult *SubscriptionResult `protobuf:"bytes,5,opt,name=subscriptionResult,proto3,oneof"`
}
type StreamMessage_UnsubscriptionResult struct {
	UnsubscriptionResult *UnsubscriptionResult `protobuf:"bytes,6,opt,name=unsubscriptionResult,proto3,oneof"`
}
type StreamMessage_MissedMessages struct {
	MissedMessages *MissedMessages `protobuf:"bytes,7,opt,name=missedMessages,proto3,oneof"`
}
type StreamMessage_MarketUpdate struct {
	MarketUpdate *markets.MarketUpdateMessage `protobuf:"bytes,2,opt,name=marketUpdate,proto3,oneof"`
}
type StreamMessage_PairUpdate struct {
	PairUpdate *markets.PairUpdateMessage `protobuf:"bytes,3,opt,name=pairUpdate,proto3,oneof"`
}
type StreamMessage_AssetUpdate struct {
	AssetUpdate *markets.AssetUpdateMessage `protobuf:"bytes,4,opt,name=assetUpdate,proto3,oneof"`
}
type StreamMessage_IndexUpdate struct {
	IndexUpdate *markets.IndexUpdateMessage `protobuf:"bytes,8,opt,name=indexUpdate,proto3,oneof"`
}
type StreamMessage_BandwidthUpdate struct {
	BandwidthUpdate *BandwidthUpdate `protobuf:"bytes,9,opt,name=bandwidthUpdate,proto3,oneof"`
}

func (*StreamMessage_AuthenticationResult) isStreamMessage_Body() {}
func (*StreamMessage_SubscriptionResult) isStreamMessage_Body()   {}
func (*StreamMessage_UnsubscriptionResult) isStreamMessage_Body() {}
func (*StreamMessage_MissedMessages) isStreamMessage_Body()       {}
func (*StreamMessage_MarketUpdate) isStreamMessage_Body()         {}
func (*StreamMessage_PairUpdate) isStreamMessage_Body()           {}
func (*StreamMessage_AssetUpdate) isStreamMessage_Body()          {}
func (*StreamMessage_IndexUpdate) isStreamMessage_Body()          {}
func (*StreamMessage_BandwidthUpdate) isStreamMessage_Body()      {}

func (m *StreamMessage) GetBody() isStreamMessage_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *StreamMessage) GetAuthenticationResult() *AuthenticationResult {
	if x, ok := m.GetBody().(*StreamMessage_AuthenticationResult); ok {
		return x.AuthenticationResult
	}
	return nil
}

func (m *StreamMessage) GetSubscriptionResult() *SubscriptionResult {
	if x, ok := m.GetBody().(*StreamMessage_SubscriptionResult); ok {
		return x.SubscriptionResult
	}
	return nil
}

func (m *StreamMessage) GetUnsubscriptionResult() *UnsubscriptionResult {
	if x, ok := m.GetBody().(*StreamMessage_UnsubscriptionResult); ok {
		return x.UnsubscriptionResult
	}
	return nil
}

func (m *StreamMessage) GetMissedMessages() *MissedMessages {
	if x, ok := m.GetBody().(*StreamMessage_MissedMessages); ok {
		return x.MissedMessages
	}
	return nil
}

func (m *StreamMessage) GetMarketUpdate() *markets.MarketUpdateMessage {
	if x, ok := m.GetBody().(*StreamMessage_MarketUpdate); ok {
		return x.MarketUpdate
	}
	return nil
}

func (m *StreamMessage) GetPairUpdate() *markets.PairUpdateMessage {
	if x, ok := m.GetBody().(*StreamMessage_PairUpdate); ok {
		return x.PairUpdate
	}
	return nil
}

func (m *StreamMessage) GetAssetUpdate() *markets.AssetUpdateMessage {
	if x, ok := m.GetBody().(*StreamMessage_AssetUpdate); ok {
		return x.AssetUpdate
	}
	return nil
}

func (m *StreamMessage) GetIndexUpdate() *markets.IndexUpdateMessage {
	if x, ok := m.GetBody().(*StreamMessage_IndexUpdate); ok {
		return x.IndexUpdate
	}
	return nil
}

func (m *StreamMessage) GetBandwidthUpdate() *BandwidthUpdate {
	if x, ok := m.GetBody().(*StreamMessage_BandwidthUpdate); ok {
		return x.BandwidthUpdate
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamMessage_OneofMarshaler, _StreamMessage_OneofUnmarshaler, _StreamMessage_OneofSizer, []interface{}{
		(*StreamMessage_AuthenticationResult)(nil),
		(*StreamMessage_SubscriptionResult)(nil),
		(*StreamMessage_UnsubscriptionResult)(nil),
		(*StreamMessage_MissedMessages)(nil),
		(*StreamMessage_MarketUpdate)(nil),
		(*StreamMessage_PairUpdate)(nil),
		(*StreamMessage_AssetUpdate)(nil),
		(*StreamMessage_IndexUpdate)(nil),
		(*StreamMessage_BandwidthUpdate)(nil),
	}
}

func _StreamMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamMessage)
	// body
	switch x := m.Body.(type) {
	case *StreamMessage_AuthenticationResult:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AuthenticationResult); err != nil {
			return err
		}
	case *StreamMessage_SubscriptionResult:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubscriptionResult); err != nil {
			return err
		}
	case *StreamMessage_UnsubscriptionResult:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UnsubscriptionResult); err != nil {
			return err
		}
	case *StreamMessage_MissedMessages:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MissedMessages); err != nil {
			return err
		}
	case *StreamMessage_MarketUpdate:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MarketUpdate); err != nil {
			return err
		}
	case *StreamMessage_PairUpdate:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PairUpdate); err != nil {
			return err
		}
	case *StreamMessage_AssetUpdate:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AssetUpdate); err != nil {
			return err
		}
	case *StreamMessage_IndexUpdate:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.IndexUpdate); err != nil {
			return err
		}
	case *StreamMessage_BandwidthUpdate:
		_ = b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BandwidthUpdate); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamMessage.Body has unexpected type %T", x)
	}
	return nil
}

func _StreamMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamMessage)
	switch tag {
	case 1: // body.authenticationResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AuthenticationResult)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_AuthenticationResult{msg}
		return true, err
	case 5: // body.subscriptionResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubscriptionResult)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_SubscriptionResult{msg}
		return true, err
	case 6: // body.unsubscriptionResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UnsubscriptionResult)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_UnsubscriptionResult{msg}
		return true, err
	case 7: // body.missedMessages
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MissedMessages)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_MissedMessages{msg}
		return true, err
	case 2: // body.marketUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(markets.MarketUpdateMessage)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_MarketUpdate{msg}
		return true, err
	case 3: // body.pairUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(markets.PairUpdateMessage)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_PairUpdate{msg}
		return true, err
	case 4: // body.assetUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(markets.AssetUpdateMessage)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_AssetUpdate{msg}
		return true, err
	case 8: // body.indexUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(markets.IndexUpdateMessage)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_IndexUpdate{msg}
		return true, err
	case 9: // body.bandwidthUpdate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BandwidthUpdate)
		err := b.DecodeMessage(msg)
		m.Body = &StreamMessage_BandwidthUpdate{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamMessage)
	// body
	switch x := m.Body.(type) {
	case *StreamMessage_AuthenticationResult:
		s := proto.Size(x.AuthenticationResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_SubscriptionResult:
		s := proto.Size(x.SubscriptionResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_UnsubscriptionResult:
		s := proto.Size(x.UnsubscriptionResult)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_MissedMessages:
		s := proto.Size(x.MissedMessages)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_MarketUpdate:
		s := proto.Size(x.MarketUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_PairUpdate:
		s := proto.Size(x.PairUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_AssetUpdate:
		s := proto.Size(x.AssetUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_IndexUpdate:
		s := proto.Size(x.IndexUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamMessage_BandwidthUpdate:
		s := proto.Size(x.BandwidthUpdate)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AuthenticationResult struct {
	Status               AuthenticationResult_Status `protobuf:"varint,1,opt,name=status,proto3,enum=ProtobufStream.AuthenticationResult_Status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *AuthenticationResult) Reset()         { *m = AuthenticationResult{} }
func (m *AuthenticationResult) String() string { return proto.CompactTextString(m) }
func (*AuthenticationResult) ProtoMessage()    {}
func (*AuthenticationResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{1}
}
func (m *AuthenticationResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuthenticationResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuthenticationResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AuthenticationResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuthenticationResult.Merge(dst, src)
}
func (m *AuthenticationResult) XXX_Size() int {
	return m.Size()
}
func (m *AuthenticationResult) XXX_DiscardUnknown() {
	xxx_messageInfo_AuthenticationResult.DiscardUnknown(m)
}

var xxx_messageInfo_AuthenticationResult proto.InternalMessageInfo

func (m *AuthenticationResult) GetStatus() AuthenticationResult_Status {
	if m != nil {
		return m.Status
	}
	return AuthenticationResult_UNKNOWN
}

// SubscriptionResult is sent to clients after subscription to some key(s) is
// attempted. It happens after successful authentication (if authentication
// message contained initial subscriptions) as well as after
// ClientSubscribeMessage.
type SubscriptionResult struct {
	// Successful subscriptions
	Subscribed []string `protobuf:"bytes,1,rep,name=subscribed,proto3" json:"subscribed,omitempty"` // Deprecated: Do not use.
	// Faied subscriptions
	Failed []*SubscribeError `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
	// Current status: list of the keys to which the client is now subscribed
	Status *SubscriptionStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Successful subscriptions
	Subscriptions        []*client.ClientSubscription `protobuf:"bytes,4,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SubscriptionResult) Reset()         { *m = SubscriptionResult{} }
func (m *SubscriptionResult) String() string { return proto.CompactTextString(m) }
func (*SubscriptionResult) ProtoMessage()    {}
func (*SubscriptionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{2}
}
func (m *SubscriptionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscriptionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionResult.Merge(dst, src)
}
func (m *SubscriptionResult) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionResult proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *SubscriptionResult) GetSubscribed() []string {
	if m != nil {
		return m.Subscribed
	}
	return nil
}

func (m *SubscriptionResult) GetFailed() []*SubscribeError {
	if m != nil {
		return m.Failed
	}
	return nil
}

func (m *SubscriptionResult) GetStatus() *SubscriptionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *SubscriptionResult) GetSubscriptions() []*client.ClientSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// UnsubscriptionResult is sent to clients in response to
// ClientUnsubscribeMessage.
type UnsubscriptionResult struct {
	// Successful unsubscriptions
	Unsubscribed []string `protobuf:"bytes,1,rep,name=unsubscribed,proto3" json:"unsubscribed,omitempty"` // Deprecated: Do not use.
	// Faied unsubscriptions
	Failed []*UnsubscribeError `protobuf:"bytes,2,rep,name=failed,proto3" json:"failed,omitempty"`
	// Current status: list of the keys to which the client is now subscribed
	Status *SubscriptionStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// Successful unsubscriptions
	Subscriptions        []*client.ClientSubscription `protobuf:"bytes,4,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UnsubscriptionResult) Reset()         { *m = UnsubscriptionResult{} }
func (m *UnsubscriptionResult) String() string { return proto.CompactTextString(m) }
func (*UnsubscriptionResult) ProtoMessage()    {}
func (*UnsubscriptionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{3}
}
func (m *UnsubscriptionResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsubscriptionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsubscriptionResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnsubscriptionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscriptionResult.Merge(dst, src)
}
func (m *UnsubscriptionResult) XXX_Size() int {
	return m.Size()
}
func (m *UnsubscriptionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscriptionResult.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscriptionResult proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *UnsubscriptionResult) GetUnsubscribed() []string {
	if m != nil {
		return m.Unsubscribed
	}
	return nil
}

func (m *UnsubscriptionResult) GetFailed() []*UnsubscribeError {
	if m != nil {
		return m.Failed
	}
	return nil
}

func (m *UnsubscriptionResult) GetStatus() *SubscriptionStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *UnsubscriptionResult) GetSubscriptions() []*client.ClientSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// SubscribeError represents an error of a single key: it contains the key and
// the error message explaining why subscription has failed. Sent as part of
// SubscriptionResult.
type SubscribeError struct {
	Key                  string                     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // Deprecated: Do not use.
	Error                string                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Subscription         *client.ClientSubscription `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *SubscribeError) Reset()         { *m = SubscribeError{} }
func (m *SubscribeError) String() string { return proto.CompactTextString(m) }
func (*SubscribeError) ProtoMessage()    {}
func (*SubscribeError) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{4}
}
func (m *SubscribeError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscribeError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeError.Merge(dst, src)
}
func (m *SubscribeError) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeError) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeError.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeError proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *SubscribeError) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SubscribeError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *SubscribeError) GetSubscription() *client.ClientSubscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

// UnsubscribeError represents an error of a single key: it contains the key
// and the error message explaining why unsubscription has failed. Sent as part
// of UnsubscriptionResult.
type UnsubscribeError struct {
	Key                  string                     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"` // Deprecated: Do not use.
	Error                string                     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Subscription         *client.ClientSubscription `protobuf:"bytes,3,opt,name=subscription,proto3" json:"subscription,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *UnsubscribeError) Reset()         { *m = UnsubscribeError{} }
func (m *UnsubscribeError) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeError) ProtoMessage()    {}
func (*UnsubscribeError) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{5}
}
func (m *UnsubscribeError) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnsubscribeError) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnsubscribeError.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UnsubscribeError) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeError.Merge(dst, src)
}
func (m *UnsubscribeError) XXX_Size() int {
	return m.Size()
}
func (m *UnsubscribeError) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeError.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeError proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *UnsubscribeError) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UnsubscribeError) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *UnsubscribeError) GetSubscription() *client.ClientSubscription {
	if m != nil {
		return m.Subscription
	}
	return nil
}

// SubscriptionStatus contains the key to which the client is subscribed right
// now. Sent as part of SubscriptionResult and UnsubscriptionResult.
type SubscriptionStatus struct {
	Keys                 []string                     `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"` // Deprecated: Do not use.
	Subscriptions        []*client.ClientSubscription `protobuf:"bytes,2,rep,name=subscriptions,proto3" json:"subscriptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SubscriptionStatus) Reset()         { *m = SubscriptionStatus{} }
func (m *SubscriptionStatus) String() string { return proto.CompactTextString(m) }
func (*SubscriptionStatus) ProtoMessage()    {}
func (*SubscriptionStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{6}
}
func (m *SubscriptionStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscriptionStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscriptionStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SubscriptionStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionStatus.Merge(dst, src)
}
func (m *SubscriptionStatus) XXX_Size() int {
	return m.Size()
}
func (m *SubscriptionStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionStatus proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *SubscriptionStatus) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *SubscriptionStatus) GetSubscriptions() []*client.ClientSubscription {
	if m != nil {
		return m.Subscriptions
	}
	return nil
}

// MissedMessages is sent by stream to the clients if stream's internal buffer
// is overflown by the messages, so some messages were missed. Normally it
// could only happen if a client subscribes to too many channels.
type MissedMessages struct {
	NumMissedMessages    int64    `protobuf:"varint,1,opt,name=numMissedMessages,proto3" json:"numMissedMessages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MissedMessages) Reset()         { *m = MissedMessages{} }
func (m *MissedMessages) String() string { return proto.CompactTextString(m) }
func (*MissedMessages) ProtoMessage()    {}
func (*MissedMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{7}
}
func (m *MissedMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MissedMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MissedMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MissedMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MissedMessages.Merge(dst, src)
}
func (m *MissedMessages) XXX_Size() int {
	return m.Size()
}
func (m *MissedMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_MissedMessages.DiscardUnknown(m)
}

var xxx_messageInfo_MissedMessages proto.InternalMessageInfo

func (m *MissedMessages) GetNumMissedMessages() int64 {
	if m != nil {
		return m.NumMissedMessages
	}
	return 0
}

// BandwidthUpdate is sent periodically to update stream api clients on their bandwidth usage.
// - Ok indicates if you have remaining bandwidth to stream.
// - bytesRemaining is the number of bytes you can stream until the next billing period.
// - bytesUsed is the number of bytes you have streamed since the last billing period.
type BandwidthUpdate struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	BytesRemaining       int64    `protobuf:"varint,2,opt,name=bytesRemaining,proto3" json:"bytesRemaining,omitempty"`
	BytesUsed            int64    `protobuf:"varint,3,opt,name=bytesUsed,proto3" json:"bytesUsed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BandwidthUpdate) Reset()         { *m = BandwidthUpdate{} }
func (m *BandwidthUpdate) String() string { return proto.CompactTextString(m) }
func (*BandwidthUpdate) ProtoMessage()    {}
func (*BandwidthUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_c5e6a20fdf0629c1, []int{8}
}
func (m *BandwidthUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BandwidthUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BandwidthUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BandwidthUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BandwidthUpdate.Merge(dst, src)
}
func (m *BandwidthUpdate) XXX_Size() int {
	return m.Size()
}
func (m *BandwidthUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_BandwidthUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_BandwidthUpdate proto.InternalMessageInfo

func (m *BandwidthUpdate) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *BandwidthUpdate) GetBytesRemaining() int64 {
	if m != nil {
		return m.BytesRemaining
	}
	return 0
}

func (m *BandwidthUpdate) GetBytesUsed() int64 {
	if m != nil {
		return m.BytesUsed
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamMessage)(nil), "ProtobufStream.StreamMessage")
	proto.RegisterType((*AuthenticationResult)(nil), "ProtobufStream.AuthenticationResult")
	proto.RegisterType((*SubscriptionResult)(nil), "ProtobufStream.SubscriptionResult")
	proto.RegisterType((*UnsubscriptionResult)(nil), "ProtobufStream.UnsubscriptionResult")
	proto.RegisterType((*SubscribeError)(nil), "ProtobufStream.SubscribeError")
	proto.RegisterType((*UnsubscribeError)(nil), "ProtobufStream.UnsubscribeError")
	proto.RegisterType((*SubscriptionStatus)(nil), "ProtobufStream.SubscriptionStatus")
	proto.RegisterType((*MissedMessages)(nil), "ProtobufStream.MissedMessages")
	proto.RegisterType((*BandwidthUpdate)(nil), "ProtobufStream.BandwidthUpdate")
	proto.RegisterEnum("ProtobufStream.AuthenticationResult_Status", AuthenticationResult_Status_name, AuthenticationResult_Status_value)
}
func (m *StreamMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Body != nil {
		nn1, err := m.Body.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StreamMessage_AuthenticationResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AuthenticationResult != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.AuthenticationResult.Size()))
		n2, err := m.AuthenticationResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *StreamMessage_MarketUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MarketUpdate != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MarketUpdate.Size()))
		n3, err := m.MarketUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *StreamMessage_PairUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PairUpdate != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.PairUpdate.Size()))
		n4, err := m.PairUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *StreamMessage_AssetUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.AssetUpdate != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.AssetUpdate.Size()))
		n5, err := m.AssetUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *StreamMessage_SubscriptionResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.SubscriptionResult != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.SubscriptionResult.Size()))
		n6, err := m.SubscriptionResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func (m *StreamMessage_UnsubscriptionResult) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.UnsubscriptionResult != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.UnsubscriptionResult.Size()))
		n7, err := m.UnsubscriptionResult.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}
func (m *StreamMessage_MissedMessages) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.MissedMessages != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.MissedMessages.Size()))
		n8, err := m.MissedMessages.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}
func (m *StreamMessage_IndexUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.IndexUpdate != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.IndexUpdate.Size()))
		n9, err := m.IndexUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}
func (m *StreamMessage_BandwidthUpdate) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BandwidthUpdate != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.BandwidthUpdate.Size()))
		n10, err := m.BandwidthUpdate.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	return i, nil
}
func (m *AuthenticationResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuthenticationResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscriptionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Subscribed) > 0 {
		for _, s := range m.Subscribed {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Failed) > 0 {
		for _, msg := range m.Failed {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStream(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Status.Size()))
		n11, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintStream(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UnsubscriptionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsubscriptionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Unsubscribed) > 0 {
		for _, s := range m.Unsubscribed {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Failed) > 0 {
		for _, msg := range m.Failed {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStream(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Status.Size()))
		n12, err := m.Status.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0x22
			i++
			i = encodeVarintStream(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscribeError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Subscription != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Subscription.Size()))
		n13, err := m.Subscription.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UnsubscribeError) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnsubscribeError) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintStream(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Subscription != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.Subscription.Size()))
		n14, err := m.Subscription.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SubscriptionStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscriptionStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, msg := range m.Subscriptions {
			dAtA[i] = 0x12
			i++
			i = encodeVarintStream(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MissedMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MissedMessages) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NumMissedMessages != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.NumMissedMessages))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BandwidthUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BandwidthUpdate) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Ok {
		dAtA[i] = 0x8
		i++
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.BytesRemaining != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.BytesRemaining))
	}
	if m.BytesUsed != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintStream(dAtA, i, uint64(m.BytesUsed))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StreamMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Body != nil {
		n += m.Body.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StreamMessage_AuthenticationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuthenticationResult != nil {
		l = m.AuthenticationResult.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_MarketUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MarketUpdate != nil {
		l = m.MarketUpdate.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_PairUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PairUpdate != nil {
		l = m.PairUpdate.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_AssetUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetUpdate != nil {
		l = m.AssetUpdate.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_SubscriptionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubscriptionResult != nil {
		l = m.SubscriptionResult.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_UnsubscriptionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UnsubscriptionResult != nil {
		l = m.UnsubscriptionResult.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_MissedMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MissedMessages != nil {
		l = m.MissedMessages.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_IndexUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IndexUpdate != nil {
		l = m.IndexUpdate.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *StreamMessage_BandwidthUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BandwidthUpdate != nil {
		l = m.BandwidthUpdate.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	return n
}
func (m *AuthenticationResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovStream(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscriptionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Subscribed) > 0 {
		for _, s := range m.Subscribed {
			l = len(s)
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if len(m.Failed) > 0 {
		for _, e := range m.Failed {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnsubscriptionResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unsubscribed) > 0 {
		for _, s := range m.Unsubscribed {
			l = len(s)
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if len(m.Failed) > 0 {
		for _, e := range m.Failed {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.Status != nil {
		l = m.Status.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscribeError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Subscription != nil {
		l = m.Subscription.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UnsubscribeError) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.Subscription != nil {
		l = m.Subscription.Size()
		n += 1 + l + sovStream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SubscriptionStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Keys) > 0 {
		for _, s := range m.Keys {
			l = len(s)
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if len(m.Subscriptions) > 0 {
		for _, e := range m.Subscriptions {
			l = e.Size()
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MissedMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumMissedMessages != 0 {
		n += 1 + sovStream(uint64(m.NumMissedMessages))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BandwidthUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.BytesRemaining != 0 {
		n += 1 + sovStream(uint64(m.BytesRemaining))
	}
	if m.BytesUsed != 0 {
		n += 1 + sovStream(uint64(m.BytesUsed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStream(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthenticationResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AuthenticationResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_AuthenticationResult{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &markets.MarketUpdateMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_MarketUpdate{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PairUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &markets.PairUpdateMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_PairUpdate{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &markets.AssetUpdateMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_AssetUpdate{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SubscriptionResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_SubscriptionResult{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnsubscriptionResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UnsubscriptionResult{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_UnsubscriptionResult{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MissedMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MissedMessages{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_MissedMessages{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &markets.IndexUpdateMessage{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_IndexUpdate{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BandwidthUpdate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BandwidthUpdate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Body = &StreamMessage_BandwidthUpdate{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuthenticationResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuthenticationResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuthenticationResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (AuthenticationResult_Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscribed = append(m.Subscribed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failed = append(m.Failed, &SubscribeError{})
			if err := m.Failed[len(m.Failed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SubscriptionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &client.ClientSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsubscriptionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsubscriptionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsubscriptionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unsubscribed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unsubscribed = append(m.Unsubscribed, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Failed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Failed = append(m.Failed, &UnsubscribeError{})
			if err := m.Failed[len(m.Failed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Status == nil {
				m.Status = &SubscriptionStatus{}
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &client.ClientSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscription == nil {
				m.Subscription = &client.ClientSubscription{}
			}
			if err := m.Subscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnsubscribeError) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnsubscribeError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnsubscribeError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscription", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subscription == nil {
				m.Subscription = &client.ClientSubscription{}
			}
			if err := m.Subscription.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscriptionStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscriptionStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscriptionStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscriptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subscriptions = append(m.Subscriptions, &client.ClientSubscription{})
			if err := m.Subscriptions[len(m.Subscriptions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MissedMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MissedMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MissedMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumMissedMessages", wireType)
			}
			m.NumMissedMessages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumMissedMessages |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BandwidthUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BandwidthUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BandwidthUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesRemaining", wireType)
			}
			m.BytesRemaining = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesRemaining |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BytesUsed", wireType)
			}
			m.BytesUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BytesUsed |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowStream
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipStream(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthStream = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("stream/stream.proto", fileDescriptor_stream_c5e6a20fdf0629c1) }

var fileDescriptor_stream_c5e6a20fdf0629c1 = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4d, 0x6f, 0xda, 0x4a,
	0x14, 0xc5, 0x18, 0x48, 0xb8, 0x01, 0xe2, 0xdc, 0xa0, 0x27, 0x14, 0x3d, 0xf1, 0x90, 0x5f, 0x15,
	0x45, 0x6a, 0x45, 0xa4, 0x54, 0xaa, 0xaa, 0x2e, 0x2a, 0xf1, 0xe1, 0xd6, 0x94, 0x62, 0xa2, 0x01,
	0xd4, 0xa6, 0x1b, 0x64, 0xe2, 0x49, 0x62, 0x11, 0x0c, 0xf2, 0x98, 0xb6, 0x6c, 0xba, 0xaa, 0xfa,
	0x1b, 0xfa, 0x93, 0xba, 0xec, 0xbe, 0x9b, 0x28, 0xfd, 0x0f, 0x5d, 0x56, 0x95, 0xc7, 0x26, 0xd8,
	0xc6, 0x51, 0xab, 0x6e, 0xda, 0xd5, 0x30, 0xc7, 0xe7, 0x1c, 0xdf, 0x39, 0xf7, 0x7a, 0x04, 0xec,
	0x32, 0xc7, 0xa6, 0xfa, 0xe4, 0xd0, 0x5b, 0xaa, 0x33, 0x7b, 0xea, 0x4c, 0xb1, 0x70, 0xec, 0x2e,
	0xa3, 0xf9, 0x59, 0x8f, 0xa3, 0x7b, 0xbb, 0xa7, 0x97, 0x26, 0xb5, 0x9c, 0x43, 0x6f, 0xf1, 0x48,
	0x7b, 0xc5, 0x89, 0x6e, 0x8f, 0xa9, 0xc3, 0x0e, 0xbd, 0xd5, 0x47, 0x77, 0x97, 0xa8, 0x69, 0x19,
	0xf4, 0xad, 0x0f, 0xe2, 0x12, 0x9c, 0xe9, 0xa6, 0x1d, 0x25, 0xea, 0x8c, 0x2d, 0xd5, 0xf2, 0x55,
	0x1a, 0xf2, 0xde, 0x3b, 0x3b, 0x94, 0x31, 0xfd, 0x9c, 0xe2, 0x2b, 0x28, 0xea, 0x73, 0xe7, 0x82,
	0x5a, 0x8e, 0x79, 0xaa, 0x3b, 0xe6, 0xd4, 0x22, 0x94, 0xcd, 0x2f, 0x9d, 0x92, 0x50, 0x11, 0x0e,
	0xb6, 0x8e, 0xee, 0x54, 0xc3, 0x95, 0x56, 0x6b, 0x31, 0x5c, 0x35, 0x41, 0x62, 0x3d, 0xf0, 0x19,
	0xe4, 0xbc, 0x22, 0x06, 0x33, 0x43, 0x77, 0x68, 0x29, 0x19, 0xf1, 0xec, 0x78, 0x15, 0x56, 0x3b,
	0x01, 0x92, 0x5f, 0x97, 0x9a, 0x20, 0x21, 0x2d, 0x36, 0x01, 0xdc, 0xc3, 0xf9, 0x4e, 0x22, 0x77,
	0x92, 0xd7, 0x9c, 0x8e, 0x6f, 0x28, 0x2b, 0x9f, 0x80, 0x0e, 0x9f, 0xc2, 0x16, 0x8f, 0xc3, 0xb7,
	0x49, 0x71, 0x9b, 0xff, 0xd7, 0x6c, 0x6a, 0x2b, 0xce, 0xca, 0x27, 0xa8, 0xc4, 0x3e, 0x20, 0x9b,
	0x8f, 0xd8, 0xa9, 0x6d, 0xce, 0x02, 0xa1, 0xa5, 0x23, 0x65, 0xf9, 0xa1, 0xf5, 0xd6, 0x98, 0x6a,
	0x82, 0xc4, 0xe8, 0xdd, 0x66, 0xcc, 0xad, 0x18, 0xdf, 0x4c, 0x7c, 0x33, 0x06, 0x31, 0x5c, 0xb7,
	0x19, 0x71, 0x1e, 0xa8, 0x42, 0x61, 0x62, 0x32, 0x46, 0x0d, 0xff, 0x44, 0xac, 0xb4, 0xc1, 0x5d,
	0xcb, 0x51, 0xd7, 0x4e, 0x88, 0xa5, 0x26, 0x48, 0x44, 0xe7, 0x86, 0xc8, 0x87, 0xcf, 0x0f, 0x71,
	0xf3, 0x96, 0x10, 0x5b, 0x2b, 0x4e, 0x20, 0xc4, 0x80, 0x12, 0xdb, 0xb0, 0x3d, 0xd2, 0x2d, 0xe3,
	0x8d, 0x69, 0x38, 0x17, 0xbe, 0x59, 0x96, 0x9b, 0xfd, 0x17, 0xad, 0xa9, 0x1e, 0xa6, 0xa9, 0x09,
	0x12, 0x55, 0xd6, 0x33, 0x90, 0x1a, 0x4d, 0x8d, 0x85, 0xfc, 0x45, 0x80, 0x62, 0xdc, 0x94, 0x62,
	0x03, 0x32, 0xcc, 0xd1, 0x9d, 0x39, 0xe3, 0xb3, 0x5d, 0x38, 0xba, 0xfb, 0x2b, 0xb3, 0x5d, 0xed,
	0x71, 0x09, 0xf1, 0xa5, 0xf2, 0x3b, 0xc8, 0x78, 0x08, 0x6e, 0xc1, 0xc6, 0x40, 0x6b, 0x6b, 0xdd,
	0x17, 0x9a, 0x94, 0xc0, 0x1d, 0xc8, 0xd7, 0x06, 0x7d, 0x55, 0xd1, 0xfa, 0xad, 0x46, 0xad, 0xaf,
	0x34, 0x25, 0x01, 0xf3, 0x90, 0xad, 0xd7, 0x9a, 0x43, 0xad, 0xab, 0x35, 0x14, 0x29, 0xb9, 0xdc,
	0xf6, 0xbb, 0x6d, 0x45, 0x93, 0x44, 0x57, 0xc0, 0x7f, 0x0e, 0x95, 0x97, 0xc7, 0x2d, 0xa2, 0x34,
	0xa5, 0x14, 0x4a, 0x90, 0x23, 0x4a, 0xad, 0xd9, 0xd5, 0x9e, 0x9f, 0x0c, 0xdb, 0xca, 0x89, 0x94,
	0xe6, 0xae, 0x8d, 0x86, 0xd2, 0xeb, 0x0d, 0x9b, 0x8a, 0xd6, 0x52, 0x9a, 0x52, 0x46, 0xfe, 0x26,
	0x00, 0xae, 0x8f, 0x13, 0xca, 0x00, 0x7e, 0xcb, 0x47, 0xd4, 0x28, 0x09, 0x15, 0xf1, 0x20, 0x5b,
	0x4f, 0x96, 0x04, 0x12, 0x40, 0xf1, 0x01, 0x64, 0xce, 0x74, 0xf3, 0x92, 0x1a, 0xa5, 0x64, 0x45,
	0x8c, 0x6b, 0x7c, 0x6f, 0xc9, 0x55, 0x6c, 0x7b, 0x6a, 0x13, 0x9f, 0x8d, 0x8f, 0x6e, 0x72, 0x13,
	0x7f, 0x3e, 0xde, 0xe1, 0xb8, 0x50, 0x85, 0x7c, 0x70, 0x14, 0x59, 0x29, 0xc5, 0x5f, 0xbd, 0xb2,
	0x68, 0x78, 0x37, 0x9e, 0xb7, 0x84, 0x0e, 0x16, 0x16, 0xca, 0xdf, 0x05, 0x28, 0xc6, 0xcd, 0x3b,
	0xee, 0x43, 0xee, 0x66, 0xde, 0xc3, 0x87, 0x0f, 0xe1, 0xf8, 0x30, 0x72, 0xfc, 0xca, 0xad, 0x5f,
	0xd3, 0xdf, 0x19, 0xc0, 0x7b, 0x01, 0x0a, 0xe1, 0x0e, 0x61, 0x11, 0xc4, 0x31, 0x5d, 0xf0, 0x71,
	0xf6, 0x4e, 0xec, 0x6e, 0xb1, 0x08, 0x69, 0xea, 0x3e, 0xe6, 0xd7, 0x6d, 0x96, 0x78, 0x1b, 0x7c,
	0x02, 0xb9, 0xa0, 0xdf, 0xda, 0x51, 0x6e, 0xaf, 0x23, 0xa4, 0x93, 0x3f, 0x08, 0x20, 0x45, 0x93,
	0xfa, 0x23, 0x85, 0xbc, 0x0e, 0x7f, 0x08, 0xfe, 0x57, 0xf9, 0x0f, 0xa4, 0xc6, 0x74, 0xc1, 0x02,
	0x53, 0xc0, 0xf7, 0xeb, 0x7d, 0x48, 0xfe, 0x6e, 0x1f, 0x1e, 0x43, 0x21, 0x7c, 0x43, 0xe2, 0x3d,
	0xd8, 0xb1, 0xe6, 0x93, 0x30, 0xc8, 0xb3, 0x10, 0xc9, 0xfa, 0x03, 0xf9, 0x1c, 0xb6, 0x23, 0xb7,
	0x19, 0x16, 0x20, 0x39, 0x1d, 0x73, 0xc5, 0x26, 0x49, 0x4e, 0xc7, 0xb8, 0x0f, 0x85, 0xd1, 0xc2,
	0xa1, 0x8c, 0xd0, 0x89, 0x6e, 0x5a, 0xa6, 0x75, 0xce, 0x13, 0x14, 0x49, 0x04, 0xc5, 0x7f, 0x21,
	0xcb, 0x91, 0x01, 0xa3, 0x06, 0xcf, 0x51, 0x24, 0x2b, 0xa0, 0x2e, 0x7d, 0xba, 0x2e, 0x0b, 0x9f,
	0xaf, 0xcb, 0xc2, 0xd5, 0x75, 0x59, 0xf8, 0xf8, 0xb5, 0x9c, 0x18, 0x65, 0xf8, 0x9f, 0x80, 0xfb,
	0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xb2, 0x9c, 0xc7, 0x94, 0x08, 0x00, 0x00,
}
